#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "triple-s.h"

struct llnode {
  int index;
  char *item;
  struct llnode *next;
};

struct triple_s {
  int len;
  struct llnode *front;
  struct llnode *back;
};


// The following applies to all functions
// requires: all sss parameters are valid (not NULL) 
//           all s parameters are valid (not NULL)
// time: (n) is the number of strings in the sss
//       (m) is the length of the string s

// sss_create() creates a new SSS ADT
// effects: allocates memory (you must call sss_destroy)
// time: O(1)
struct triple_s *sss_create(void) {
  struct triple_s *sss = malloc(sizeof(struct triple_s));
  //trace_ptr(sss);
  sss->front = NULL;
  sss->back = NULL;
  sss->len = 0;
  return sss;
}

// my_strdup (s) will return address of a cpy of s
// requires valid s
// effects: allocates memory (needs to be freed by caller)
// time: O(m)
char *my_strdup(const char *s) {
  assert(s);
  int len = strlen(s);
  char *copy = malloc((len + 1) * sizeof(char));
  //trace_ptr(copy);
  strcpy(copy, s);
  return copy;
}

// sss_add_front(sss) adds the new front
// time: O(1)
void add_front(const char *s, struct triple_s *sss) {
  assert(sss);
  assert(s);

  struct llnode *newnode = malloc(sizeof(struct llnode));
  //trace_ptr(newnode);
  newnode->index = 0;
  newnode->item = my_strdup(s);
  newnode->next = sss->front;
  if (sss->front == NULL) {
    sss->back = newnode;
  }
  sss->front = newnode;
  //trace_int(1);
  sss->len += 1;
  struct llnode *index_upd = newnode->next;
  while (index_upd) {
    index_upd->index += 1;
    index_upd = index_upd->next;
  }
}

// sss_remove_front(sss) removes the front
// time: O(1)
// effect: frees the front
char *sss_remove_front(struct triple_s *sss) {
  assert(sss->front);
  char *retval = sss->front->item;
  struct llnode *old_front = sss->front;
  sss->front = sss->front->next;
  trace_ptr(old_front->item);
  trace_ptr(old_front);
  free(old_front->item);
  free(old_front);
  if (sss->front == NULL) {
    // queue is now empty
    sss->back = NULL;
  }
  sss->len -= 1;
  struct llnode *fix_idx = sss->front;

  while (fix_idx) {
    trace_int(fix_idx->index);
    fix_idx->index -= 1;
    fix_idx = fix_idx->next;
  }

  return retval;
}

// queue_is_empty(sss)determines if the sss is empty
// time: O(1)
bool sss_is_empty(const struct triple_s *sss) {
  assert(sss);
  return sss->len == 0;
}

// sss_destroy(sss) destroys sss
// requires: sss is valid (not NULL)
// effects: sss is no longer valid
// time: O(n)
void sss_destroy(struct triple_s *sss) {
  struct llnode *curnode = sss->front;
  struct llnode *nextnode = NULL;
  while (curnode) {
    nextnode = curnode->next;
    //trace_string(curnode->item);
    free(curnode->item);
    free(curnode);
    curnode = nextnode;
  }
  //trace_ptr(sss);
  free(sss);
}


// sss_add(sss, s) adds s to sss in the correct index (lexicographically)
// notes: if s already exists, there is no effect
//        when s is added, the indices of words that lexicographically
//          follow s will be changed (+1) because s is added into the "middle"
// effects: may modify sss
// time: O(nm) [MODIFIED FROM A8]
void sss_add(struct triple_s *sss, const char *s) {
  assert(sss);
  assert(s);

  if (sss->front == NULL || strcmp(s, sss->front->item) <= 0) {
    if (sss->front != NULL && strcmp(s, sss->front->item) == 0) {
      return; 
    }
    add_front(s, sss);
  } else {
    // find the node that will be "before" our insert
    //printf("%s\n", s);
    int i = 1;
    struct llnode *before = sss->front;
    while (before->next){
      int compare = strcmp(s, before->next->item);
      //trace_int(compare);
      if (compare == 0) {
        return; 
      } else if (compare < 0) {
        break; 
      }
      ++i;
      before = before->next;
    }
    // now do the insert
    struct llnode *newnode = malloc(sizeof(struct llnode));
    //trace_ptr(newnode);
    newnode->index = i;
    newnode->item = my_strdup(s);
    newnode->next = before->next;
    before->next = newnode;
    //trace_int(1);
    sss->len += 1;
    struct llnode *index_upd = newnode->next;
    while (index_upd) {
      index_upd->index += 1;
      index_upd = index_upd->next;
    }
  }
  /* trace_string(sss->front->item);
  trace_string(sss->back->item);
  if( sss->front->next) {
    trace_string(sss->front->next->item);
    if( sss->front->next->next) {
      trace_string(sss->front->next->next->item);

    }
  } */

}

// sss_add_follows(sss, s) adds s to the "end" of the sss
// requires: s lexicographically follows all strings already in sss
// effects: modifies sss
// time: O(m)
void sss_add_follows(struct triple_s *sss, const char *s) {
  assert(sss);
  assert(s);

  struct llnode *newnode = malloc(sizeof(struct llnode));
  //trace_ptr(newnode);
  newnode->item = my_strdup(s);
  newnode->next = NULL;
  newnode->index = sss->len;
  //trace_int(1);
  sss->len += 1;
  if (sss->front == NULL) {
    // queue was empty
    sss->front = newnode;
  } else {
    sss->back->next = newnode;
  }
  sss->back = newnode;
}


// sss_remove(sss, s) removes s from sss (if it exists)
// notes: if s is removed, the indices of words that lexicographically
//          follow s will be changed (-1)
// effects: may modify sss
// time: O(nm) [MODIFIED FROM A8]
void sss_remove(struct triple_s *sss, const char *s) {
  assert(sss);
  assert(s);

  struct llnode *print = sss->front;
  while (print) {
   //trace_string(print->item);
    print=print->next;
  }
  
  if (sss->front == NULL) {
    return; 
  }
  if (strcmp(s,sss->front->item) == 0) {
    sss_remove_front(sss);
    return;
  }

  struct llnode *before = sss->front;
  while (before->next && strcmp(s,before->next->item) != 0) {
    before = before->next;
  }
  if (before->next == NULL) {
    return;
  }
  struct llnode *old_node = before->next;
  struct llnode *fix_node = before->next->next;
  before->next = before->next->next;
  //trace_ptr(old_node->item);
  //trace_ptr(old_node);
  free(old_node->item);
  free(old_node);
  sss->len -= 1;
  while (fix_node) {
    fix_node->index -= 1;
    fix_node = fix_node->next;
  }
  
  return;
}


// sss_count(sss) gets the number of strings in sss
// time: O(1)
int sss_count(const struct triple_s *sss) {
  assert(sss);
  //trace_int(sss->len);
  return sss->len;
}

// sss_search(sss, s) finds the index of s in sss
// note: returns -1 if s does not appear in the sss
// time: O(nm) [MODIFIED FROM A8]
int sss_search(const struct triple_s *sss, const char *s) {
  assert(sss);
  assert(s);

  struct llnode *curnode = sss->front;
  while (curnode && strcmp(s,curnode->item) != 0) {
    curnode = curnode->next;
  }
  if (curnode == NULL) {
    return -1;
  } else {
    struct llnode *curnode1 = sss->front;
    while (curnode1) {
      //trace_int(curnode1->index);
      curnode1 = curnode1->next;
    }
    return curnode->index;
  }

}

// sss_get(sss, idx) retrieves a pointer to the string in sss
//   at the given idx (index)
// requires: 0 <= idx < sss_count(sss)
// time: O(n) [MODIFIED FROM A8]
const char *sss_get(const struct triple_s *sss, int idx) {
  assert(sss);
  assert(0 <= idx);
  assert(idx < sss_count(sss));

  struct llnode *curnode = sss->front;
  while (curnode->index != idx) {
    curnode = curnode->next;
  }

  return curnode->item;
}